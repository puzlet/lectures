// Generated by CoffeeScript 1.7.1
(function() {
  var Arc, ButtonSet, Canvas, Circle, Complex, ComplexPlane, EulerComputation, Exercise, ExerciseBase, ExerciseComplexUnit, ExerciseRotation, Exercises, FigureComplexAddition, FigureComplexMultiplication, FigureComplexPlane, FigureComplexScaling, FigureComplexUnit, FigureComplexUnitMultiply, FigureEulerFormula, Figures, GridLines, HorizontalSlider, Line, Polygon, Server, Slider, Text, Vector, VectorSliderPair, VectorWithCircle, VectorWithTriangle, VerticalAngleSlider, Z1, abs, angleText, complex, j, linspace, pi, round, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  abs = numeric.abs;

  complex = numeric.complex;

  linspace = numeric.linspace;

  j = complex(0, 1);

  pi = Math.PI;

  Complex = {};

  EulerComputation = {};

  _ref = $blab.Exercises, Server = _ref.Server, Exercises = _ref.Exercises, ExerciseBase = _ref.ExerciseBase, ButtonSet = _ref.ButtonSet;

  _ref1 = $blab.d3, Canvas = _ref1.Canvas, Line = _ref1.Line, Arc = _ref1.Arc, Circle = _ref1.Circle, Polygon = _ref1.Polygon, GridLines = _ref1.GridLines, Text = _ref1.Text;

  Figures = (function() {
    function Figures() {
      Complex = $blab.Complex;
      EulerComputation = $blab.EulerComputation;
      new FigureComplexPlane;
      new FigureComplexUnit;
      new FigureComplexUnitMultiply;
      new FigureComplexAddition;
      new FigureComplexScaling;
      new FigureComplexMultiplication;
      new FigureEulerFormula;
      if ($(".exercises").length) {
        Server.loadExercises("complex-numbers");
      }
      new $blab.Slides;
    }

    return Figures;

  })();

  ComplexPlane = (function() {
    ComplexPlane.prototype.margin = {
      top: 10,
      right: 10,
      bottom: 10,
      left: 10
    };

    ComplexPlane.prototype.xDomain = [-1, 1];

    ComplexPlane.prototype.yDomain = [-1, 1];

    function ComplexPlane(spec) {
      var _ref2;
      this.spec = spec;
      this.container = this.spec.container;
      this.width = this.container.width();
      this.height = this.container.height();
      if ((_ref2 = this.figure) != null) {
        _ref2.find(".figure-outer").removeClass("loading");
      }
      this.createCanvas();
    }

    ComplexPlane.prototype.createCanvas = function() {
      this.canvas = new Canvas({
        container: this.container,
        width: this.width,
        height: this.height,
        margin: this.margin,
        xDomain: this.xDomain,
        yDomain: this.yDomain
      });
      return this.gridLines = new GridLines({
        canvas: this.canvas
      });
    };

    return ComplexPlane;

  })();

  FigureComplexPlane = (function(_super) {
    __extends(FigureComplexPlane, _super);

    FigureComplexPlane.prototype.id = "#figure-complex-plane";

    FigureComplexPlane.prototype.sectionId = "#section-complex-plane";

    FigureComplexPlane.prototype.exercises = "exercises-complex-plane";

    FigureComplexPlane.prototype.margin = {
      top: 40,
      right: 40,
      bottom: 40,
      left: 40
    };

    FigureComplexPlane.prototype.xDomain = [-2, 2];

    FigureComplexPlane.prototype.yDomain = [-2, 2];

    function FigureComplexPlane() {
      this.step = __bind(this.step, this);
      this.figure = $("" + this.id);
      FigureComplexPlane.__super__.constructor.call(this, {
        container: this.figure.find(".figure-surface")
      });
      this.vector = new VectorWithCircle({
        canvas: this.canvas,
        xyLines: true,
        compute: (function(_this) {
          return function(p) {
            return _this.setVector(p);
          };
        })(this)
      });
      this.slider = new VerticalAngleSlider({
        container: this.figure.find(".slider"),
        label: "\\theta",
        change: (function(_this) {
          return function(angle) {
            var z;
            z = Complex.polarToComplex(_this.magnitude, angle);
            return _this.draw(z);
          };
        })(this)
      });
      this.magnitudeText = $("<span>");
      (this.figure.find(".magnitude")).append("Magnitude: A=").append(this.magnitudeText);
      this.setVector({
        x: 1,
        y: 1
      });
      this.initButtons();
      new Exercises(this.exercises, this);
    }

    FigureComplexPlane.prototype.initButtons = function() {
      var draw;
      draw = (function(_this) {
        return function(x, y) {
          return _this.animate(complex(x, y));
        };
      })(this);
      return new ButtonSet(this.sectionId, [
        {
          id: "complex-12-plus-09i",
          method: function(cb) {
            return draw(1.2, 0.9);
          }
        }, {
          id: "complex-neg1-plus-i",
          method: function(cb) {
            return draw(-1, 1);
          }
        }, {
          id: "complex-neg1-plus-negi",
          method: (function(_this) {
            return function(cb) {
              return draw(-1, -1);
            };
          })(this)
        }, {
          id: "complex-negi",
          method: (function(_this) {
            return function(cb) {
              return draw(0, -1);
            };
          })(this)
        }
      ]);
    };

    FigureComplexPlane.prototype.setVector = function(p) {
      var setSlider, x, y;
      x = round(p.x, 1);
      y = round(p.y, 1);
      this.z = Complex.clipMagnitude(complex(x, y), 2);
      setSlider = true;
      return this.draw(this.z, setSlider);
    };

    FigureComplexPlane.prototype.draw = function(z, setSlider) {
      var _ref2;
      this.z = z;
      if (setSlider == null) {
        setSlider = false;
      }
      this.vector.set(this.z);
      _ref2 = Complex.toPolar(this.z), this.magnitude = _ref2.magnitude, this.angle = _ref2.angle;
      if (setSlider) {
        this.slider.set(this.angle);
      }
      return this.magnitudeText.html(round(this.magnitude, 2));
    };

    FigureComplexPlane.prototype.animate = function(z, callback) {
      this.vector.showXYLines(false);
      return this.vector.animate(this.z, z, (function(_this) {
        return function() {
          _this.z = z;
          _this.draw(_this.z, true);
          _this.vector.showXYLines(true);
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    FigureComplexPlane.prototype.step = function(spec, callback) {
      var next;
      this.vector.setCircleClass(spec.fill);
      next = function(t) {
        if (t == null) {
          t = 1000;
        }
        if (callback != null) {
          return setTimeout(callback, t);
        }
      };
      if (spec.t != null) {
        this.z = spec.z;
        this.draw(this.z, true);
        return next();
      } else {
        return this.animate(spec.z, next);
      }
    };

    return FigureComplexPlane;

  })(ComplexPlane);

  FigureComplexAddition = (function(_super) {
    __extends(FigureComplexAddition, _super);

    FigureComplexAddition.prototype.id = "#figure-complex-addition";

    FigureComplexAddition.prototype.exercises = "exercises-complex-addition";

    FigureComplexAddition.prototype.margin = {
      top: 40,
      right: 40,
      bottom: 40,
      left: 40
    };

    FigureComplexAddition.prototype.xDomain = [-2, 2];

    FigureComplexAddition.prototype.yDomain = [-2, 2];

    function FigureComplexAddition() {
      this.figure = $("" + this.id);
      FigureComplexAddition.__super__.constructor.call(this, {
        container: this.figure.find(".figure-surface")
      });
      this.vector1 = new VectorSliderPair({
        figure: this.figure,
        canvas: this.canvas,
        xyLines: false,
        xyLabels: false,
        sliderClass: ".slider",
        angleLabel: "\\theta_1",
        getZ: (function(_this) {
          return function(z) {
            return _this.getZ(z, _this.vector2.z());
          };
        })(this),
        set: (function(_this) {
          return function() {
            _this.setOrigin2();
            return _this.setMagnitude();
          };
        })(this)
      });
      this.vector2 = new VectorSliderPair({
        figure: this.figure,
        canvas: this.canvas,
        xyLabels: true,
        sliderClass: ".slider-2",
        angleLabel: "\\theta_2",
        getZ: (function(_this) {
          return function(z) {
            return _this.getZ(z, _this.vector1.z());
          };
        })(this),
        set: (function(_this) {
          return function() {
            return _this.setMagnitude();
          };
        })(this)
      });
      this.magnitudeText = $("<span>");
      (this.figure.find(".magnitude")).append("Magnitude: A=").append(this.magnitudeText);
      this.vector1.set(complex(1, 0.5));
      this.setOrigin2();
      this.vector2.set(complex(0.5, 0.5));
      new Exercises(this.exercises, this);
    }

    FigureComplexAddition.prototype.setMagnitude = function() {
      var A;
      A = Complex.magnitudeSum(this.vector1.z(), this.vector2.z());
      return this.magnitudeText.html(round(A, 2));
    };

    FigureComplexAddition.prototype.setOrigin2 = function(v, z) {
      return this.vector2.setOrigin(this.vector1.z());
    };

    FigureComplexAddition.prototype.getZ = function(z, other) {
      var clip, snap, total;
      total = Complex.add(z, other);
      clip = Complex.clipMagnitude(total, 2);
      snap = Complex.snap(clip, 1);
      return Complex.diff(snap, other);
    };

    return FigureComplexAddition;

  })(ComplexPlane);

  FigureComplexUnit = (function(_super) {
    __extends(FigureComplexUnit, _super);

    FigureComplexUnit.prototype.id = "#figure-complex-unit";

    FigureComplexUnit.prototype.sectionId = "#section-complex-unit";

    FigureComplexUnit.prototype.tableId = "#table-complex-unit";

    FigureComplexUnit.prototype.exercises = "exercises-complex-unit";

    FigureComplexUnit.prototype.margin = {
      top: 40,
      right: 40,
      bottom: 40,
      left: 40
    };

    FigureComplexUnit.prototype.xDomain = [-2, 2];

    FigureComplexUnit.prototype.yDomain = [-2, 2];

    function FigureComplexUnit() {
      this.animate = __bind(this.animate, this);
      var click, idx, vector, z, _i, _len, _ref2;
      this.figure = $(this.id);
      FigureComplexUnit.__super__.constructor.call(this, {
        container: this.figure.find(".figure-surface")
      });
      this.zValues = [
        {
          value: complex(1, 0),
          r180: "1 \\times -1 = -1",
          f90: "1 \\times i = i",
          b90: "1 \\times -i = -i"
        }, {
          value: complex(0, 1),
          r180: "i \\times -1 = -i",
          f90: "i \\times i = i^2 = -1",
          b90: "i \\times -i = -i^2 = 1"
        }, {
          value: complex(-1, 0),
          r180: "-1 \\times -1 = 1",
          f90: "-1 \\times i = -i",
          b90: "-1 \\times -i = i"
        }, {
          value: complex(0, -1),
          r180: "-i \\times -1 = i",
          f90: "-i \\times i = -i^2 = 1",
          b90: "-i \\times -i = i^2 = -1"
        }
      ];
      click = (function(_this) {
        return function(idx) {
          return function() {
            _this.setEquation("");
            return _this.setVector(idx);
          };
        };
      })(this);
      _ref2 = this.zValues;
      for (idx = _i = 0, _len = _ref2.length; _i < _len; idx = ++_i) {
        z = _ref2[idx];
        vector = new VectorWithCircle({
          canvas: this.canvas,
          "class": "circle-no-drag",
          xyLines: false,
          arc: false,
          click: click(idx)
        });
        vector.set(z.value);
      }
      this.vector = new VectorWithCircle({
        canvas: this.canvas,
        xyLines: false,
        zLabel: true
      });
      this.table = $(this.tableId);
      this.rows = this.table.find("tr");
      this.setVector(0);
      this.initButtons();
      new Exercises(this.exercises, this);
    }

    FigureComplexUnit.prototype.initButtons = function() {
      return new ButtonSet(this.sectionId, [
        {
          id: "show-vectors",
          method: (function(_this) {
            return function(cb) {
              return _this.animateAll(cb);
            };
          })(this)
        }, {
          id: "multiply-by-negative-1",
          method: (function(_this) {
            return function(cb) {
              return _this.negate(cb);
            };
          })(this)
        }, {
          id: "z1",
          method: (function(_this) {
            return function(cb) {
              return _this.setVectorInstantly(0, cb);
            };
          })(this)
        }, {
          id: "multiply-1-by-i",
          method: (function(_this) {
            return function(cb) {
              return _this.multiplyzi(0, cb);
            };
          })(this)
        }, {
          id: "multiply-i-by-i",
          method: (function(_this) {
            return function(cb) {
              return _this.multiplyzi(1, cb);
            };
          })(this)
        }, {
          id: "multiply-by-i",
          method: (function(_this) {
            return function(cb) {
              return _this.multiply(j, cb);
            };
          })(this)
        }, {
          id: "multiply-by-negative-i",
          method: (function(_this) {
            return function(cb) {
              return _this.multiply(complex(0, -1), cb);
            };
          })(this)
        }
      ]);
    };

    FigureComplexUnit.prototype.setVector = function(idx, callback) {
      var zStart;
      this.idx = idx;
      zStart = this.z;
      this.z = this.zValues[this.idx].value;
      return this.animate(zStart, (function(_this) {
        return function() {
          _this.highlightRow();
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    FigureComplexUnit.prototype.setVectorInstantly = function(idx, callback) {
      this.idx = idx;
      this.setEquation("");
      this.z = this.zValues[this.idx].value;
      this.vector.set(this.z);
      this.highlightRow();
      return typeof callback === "function" ? callback() : void 0;
    };

    FigureComplexUnit.prototype.setToZ = function(z, callback) {
      var zStart;
      zStart = this.z;
      this.z = z;
      console.log("zStart, z", zStart, z);
      return this.animate(zStart, (function(_this) {
        return function() {
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    FigureComplexUnit.prototype.animateSet = function(zValues, callback) {
      var idx, next, set;
      idx = 0;
      next = (function(_this) {
        return function() {
          idx++;
          if (idx < zValues.length) {
            return set();
          } else {
            return typeof callback === "function" ? callback() : void 0;
          }
        };
      })(this);
      set = (function(_this) {
        return function() {
          return _this.setToZ(zValues[idx], function() {
            var delay;
            delay = idx === 0 ? 500 : 1000;
            return setTimeout((function() {
              return next();
            }), delay);
          });
        };
      })(this);
      return set();
    };

    FigureComplexUnit.prototype.animateAll = function(callback) {
      var idx, next, set;
      this.setEquation("");
      idx = 0;
      next = (function(_this) {
        return function() {
          idx++;
          if (idx < _this.zValues.length) {
            return set();
          } else {
            return _this.setVector(0, callback);
          }
        };
      })(this);
      set = (function(_this) {
        return function() {
          return _this.setVector(idx, function() {
            var delay;
            delay = idx === 0 ? 500 : 1000;
            return setTimeout((function() {
              return next();
            }), delay);
          });
        };
      })(this);
      return set();
    };

    FigureComplexUnit.prototype.animate = function(zStart, callback) {
      if (!zStart) {
        this.vector.set(this.z);
        if (typeof callback === "function") {
          callback();
        }
        return;
      }
      return this.vector.animate(zStart, this.z, (function(_this) {
        return function() {
          _this.z = _this.vector.z;
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    FigureComplexUnit.prototype.negate = function(callback) {
      var zStart;
      this.setEquation(this.zValues[this.idx].r180);
      zStart = this.z;
      this.z = Complex.mul(-1, zStart);
      return this.showOperation(zStart, callback);
    };

    FigureComplexUnit.prototype.multiplyzi = function(startIdx, callback) {
      this.setVectorInstantly(startIdx);
      return this.multiply(j, callback);
    };

    FigureComplexUnit.prototype.multiply = function(z2, callback) {
      var zStart;
      this.setEquation("");
      if (z2.x === 0) {
        if (z2.y === 1) {
          this.setEquation(this.zValues[this.idx].f90);
        } else if (z2.y === -1) {
          this.setEquation(this.zValues[this.idx].b90);
        }
      }
      zStart = this.z;
      this.z = Complex.mul(z2, zStart);
      return this.showOperation(zStart, callback);
    };

    FigureComplexUnit.prototype.showOperation = function(zStart, callback) {
      var idx;
      idx = this.getIdx(this.z);
      if (idx < 0) {
        if (typeof callback === "function") {
          callback();
        }
        return;
      }
      this.idx = idx;
      return this.animate(zStart, (function(_this) {
        return function() {
          _this.highlightRow();
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    FigureComplexUnit.prototype.setEquation = function(equation) {
      var container;
      container = $("#figure-complex-unit .equation");
      return katex.render(equation, container[0]);
    };

    FigureComplexUnit.prototype.getIdx = function(v) {
      var idx, z, _i, _len, _ref2;
      _ref2 = this.zValues;
      for (idx = _i = 0, _len = _ref2.length; _i < _len; idx = ++_i) {
        z = _ref2[idx];
        if (abs(Complex.diff(z.value, v)) < 0.000001) {
          return idx;
        }
      }
      return -1;
    };

    FigureComplexUnit.prototype.highlightRow = function() {
      var row, row0, rowIdx, _i, _len, _ref2, _results;
      _ref2 = this.rows;
      _results = [];
      for (rowIdx = _i = 0, _len = _ref2.length; _i < _len; rowIdx = ++_i) {
        row0 = _ref2[rowIdx];
        row = $(row0);
        _results.push(row.toggleClass("row-highlight", rowIdx === this.idx + 1));
      }
      return _results;
    };

    return FigureComplexUnit;

  })(ComplexPlane);

  FigureComplexUnitMultiply = (function(_super) {
    __extends(FigureComplexUnitMultiply, _super);

    FigureComplexUnitMultiply.prototype.id = "#figure-complex-unit-multiply";

    FigureComplexUnitMultiply.prototype.sectionId = "#section-complex-unit-multiply";

    FigureComplexUnitMultiply.prototype.margin = {
      top: 40,
      right: 40,
      bottom: 40,
      left: 40
    };

    FigureComplexUnitMultiply.prototype.xDomain = [-2, 2];

    FigureComplexUnitMultiply.prototype.yDomain = [-2, 2];

    function FigureComplexUnitMultiply() {
      this.figure = $(this.id);
      FigureComplexUnitMultiply.__super__.constructor.call(this, {
        container: this.figure.find(".figure-surface")
      });
      this.vector = new VectorSliderPair({
        figure: this.figure,
        canvas: this.canvas,
        xyLines: true,
        xyLabels: true,
        xyComponents: true,
        sliderClass: ".slider",
        angleLabel: "\\theta",
        getZ: (function(_this) {
          return function(z) {
            return _this.getZ(z);
          };
        })(this)
      });
      new ButtonSet(this.sectionId, [
        {
          id: "multiply-by-i",
          method: (function(_this) {
            return function(cb) {
              return _this.multiply(j, cb);
            };
          })(this)
        }, {
          id: "multiply-by-negative-i",
          method: (function(_this) {
            return function(cb) {
              return _this.multiply(complex(0, -1), cb);
            };
          })(this)
        }
      ]);
      this.vector.set(complex(1, 1));
    }

    FigureComplexUnitMultiply.prototype.multiply = function(a, callback) {
      var v;
      v = this.vector.vector;
      return this.vector.animate(v.z, Complex.mul(a, v.z), callback);
    };

    FigureComplexUnitMultiply.prototype.getZ = function(z) {
      var clip, snap;
      clip = Complex.clipMagnitude(z, 2);
      return snap = Complex.snap(clip, 1);
    };

    return FigureComplexUnitMultiply;

  })(ComplexPlane);

  FigureComplexScaling = (function(_super) {
    __extends(FigureComplexScaling, _super);

    FigureComplexScaling.prototype.id = "#figure-complex-scaling";

    FigureComplexScaling.prototype.margin = {
      top: 40,
      right: 40,
      bottom: 40,
      left: 40
    };

    FigureComplexScaling.prototype.xDomain = [-2, 2];

    FigureComplexScaling.prototype.yDomain = [-2, 2];

    function FigureComplexScaling() {
      this.figure = $("" + this.id);
      FigureComplexScaling.__super__.constructor.call(this, {
        container: this.figure.find(".figure-surface")
      });
      this.vector = new VectorWithCircle({
        canvas: this.canvas,
        xyLines: false,
        arc: true,
        compute: (function(_this) {
          return function(z) {
            _this.z = z;
            return _this.draw();
          };
        })(this)
      });
      this.scaledVector = new VectorWithCircle({
        canvas: this.canvas,
        xyLines: true,
        arc: false,
        compute: (function(_this) {
          return function(az) {
            var sf;
            _this.az = az;
            _this.z = Complex.polarToComplex(abs(_this.z), _this.az.arg());
            sf = abs(_this.az) / abs(_this.z);
            _this.sliderScaleFactor.set(sf);
            return _this.draw();
          };
        })(this)
      });
      this.sliderAngle = new VerticalAngleSlider({
        container: this.figure.find(".slider"),
        label: "\\theta",
        change: (function(_this) {
          return function(angle) {
            _this.z = Complex.polarToComplex(abs(_this.z), angle);
            return _this.draw();
          };
        })(this)
      });
      this.sliderScaleFactor = new HorizontalSlider({
        container: $(".slider-scale-factor"),
        label: "a",
        unit: "",
        init: 1.5,
        min: -5,
        max: 5,
        step: 0.1,
        change: (function(_this) {
          return function() {
            return _this.draw();
          };
        })(this),
        done: (function(_this) {
          return function() {
            return _this.draw();
          };
        })(this)
      });
      this.magnitudeText = $("<span>");
      (this.figure.find(".magnitude")).append("Magnitude: A=").append(this.magnitudeText);
      this.z = complex(1, 1);
      this.sliderScaleFactor.set(1.2);
      this.draw();
    }

    FigureComplexScaling.prototype.draw = function() {
      var sf;
      sf = round(this.sliderScaleFactor.val(), 2);
      this.az = Complex.scale(this.z, sf);
      this.az = Complex.clipMagnitude(this.az, 2);
      sf = this.sign(sf) * round(abs(this.az) / abs(this.z), 2);
      this.vector.set(this.z);
      this.scaledVector.set(this.az);
      this.sliderAngle.set(this.z.arg());
      this.sliderScaleFactor.set(sf);
      return this.magnitudeText.html(round(abs(this.az), 2));
    };

    FigureComplexScaling.prototype.sign = function(x) {
      if (x < 0) {
        return -1;
      } else {
        return 1;
      }
    };

    return FigureComplexScaling;

  })(ComplexPlane);

  FigureComplexMultiplication = (function(_super) {
    __extends(FigureComplexMultiplication, _super);

    FigureComplexMultiplication.prototype.id = "#figure-complex-multiplication";

    FigureComplexMultiplication.prototype.margin = {
      top: 40,
      right: 40,
      bottom: 40,
      left: 40
    };

    FigureComplexMultiplication.prototype.xDomain = [-2, 2];

    FigureComplexMultiplication.prototype.yDomain = [-2, 2];

    function FigureComplexMultiplication() {
      this.figure = $("" + this.id);
      FigureComplexMultiplication.__super__.constructor.call(this, {
        container: this.figure.find(".figure-surface")
      });
      this.z2 = complex(0.5, 0.5);
      this.vector = new VectorSliderPair({
        figure: this.figure,
        canvas: this.canvas,
        xyLines: false,
        arc: false,
        sliderClass: ".slider",
        angleLabel: "\\theta",
        getZ: (function(_this) {
          return function(z) {
            return _this.getZ(z);
          };
        })(this),
        set: (function(_this) {
          return function() {
            _this.z = Complex.mul(_this.vector.z(), _this.z2);
            return _this.compute();
          };
        })(this)
      });
      this.vectorResult = new VectorWithTriangle({
        canvas: this.canvas,
        "class": "triangle",
        compute: (function(_this) {
          return function(z) {
            _this.z = _this.getZ(z);
            _this.z2 = Complex.div(_this.z, _this.vector.z());
            return _this.compute();
          };
        })(this)
      });
      this.vector.set(complex(1, 0.5));
      this.compute();
    }

    FigureComplexMultiplication.prototype.getZ = function(z) {
      var clip, snap;
      clip = Complex.clipMagnitude(z, 2);
      return snap = Complex.snap(clip, 1);
    };

    FigureComplexMultiplication.prototype.compute = function() {
      this.az1 = Complex.mul(this.z2.x, this.vector.z());
      return this.vectorResult.set(this.z.x, this.z.y, this.az1.x, this.az1.y);
    };

    return FigureComplexMultiplication;

  })(ComplexPlane);

  FigureEulerFormula = (function(_super) {
    __extends(FigureEulerFormula, _super);

    FigureEulerFormula.prototype.id = "#figure-euler-formula";

    FigureEulerFormula.prototype.xDomain = [-3, 3];

    FigureEulerFormula.prototype.yDomain = [-3, 3];

    function FigureEulerFormula() {
      var N, Slider, theta;
      this.figure = $("" + this.id);
      FigureEulerFormula.__super__.constructor.call(this, {
        container: this.figure.find(".figure-surface")
      });
      theta = pi;
      N = 4;
      Slider = $blab.components.Slider;
      this.sliderTheta = new Slider({
        container: $("#slider-theta"),
        prompt: "$\\theta$",
        unit: "$\\pi$",
        init: theta / pi,
        min: 0,
        max: 2,
        step: 0.125
      });
      this.sliderN = new Slider({
        container: $("#slider-n"),
        prompt: "$n$",
        unit: "",
        init: N,
        min: 1,
        max: 200
      });
      this.renderSliderMath(this.sliderTheta);
      this.renderSliderMath(this.sliderN);
      this.sliderTheta.change((function(_this) {
        return function() {
          theta = _this.sliderTheta.getVal() * pi;
          return _this.build(theta, N);
        };
      })(this));
      this.sliderN.change((function(_this) {
        return function() {
          N = _this.sliderN.getVal();
          return _this.build(theta, N);
        };
      })(this));
      this.build(theta, N);
    }

    FigureEulerFormula.prototype.renderSliderMath = function(slider) {
      return renderMathInElement(slider.container[0], {
        delimiters: [
          {
            left: "$",
            right: "$",
            display: false
          }
        ]
      });
    };

    FigureEulerFormula.prototype.build = function(theta, N) {
      var points, step, z0;
      this.createCanvas();
      this.z0 = new Z1({
        canvas: this.canvas
      });
      z0 = complex(1, 0);
      this.z0.set(z0.x, z0.y);
      this.triangles1 = [];
      this.triangles2 = [];
      points = {
        z: z0
      };
      step = EulerComputation.angleStep(theta, N);
      this.doSteps(this.triangles1, "triangle", points, N, step);
      points = {
        z: z0
      };
      step = EulerComputation.orthoStep(theta, N);
      return this.doSteps(this.triangles2, "triangle fill-blue", points, N, step);
    };

    FigureEulerFormula.prototype.doSteps = function(triangles, c, points, N, step) {
      var n, z, _i, _results;
      _results = [];
      for (n = _i = 1; 1 <= N ? _i <= N : _i >= N; n = 1 <= N ? ++_i : --_i) {
        z = new VectorWithTriangle({
          canvas: this.canvas,
          "class": c
        });
        triangles.push(z);
        points = EulerComputation.step(points.z, step);
        _results.push(this.draw(z, points));
      }
      return _results;
    };

    FigureEulerFormula.prototype.draw = function(t, points) {
      var az1, z, z1, z2;
      z1 = points.z1, z2 = points.z2, z = points.z, az1 = points.az1;
      return t.set(z.x, z.y, az1.x, az1.y);
    };

    return FigureEulerFormula;

  })(ComplexPlane);

  $blab.Exercise = Exercise = {};

  Exercise['exercise-complex-plane-1'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.processArgs = "{z, x, y, A, θ}";

    _Class.prototype.process = function(data) {
      var A, x, y, z, z1, z2, z3, θ;
      z = data.z, x = data.x, y = data.y, A = data.A, θ = data.θ;
      if (x == null) {
        return;
      }
      z1 = z;
      z2 = complex(x, y);
      z3 = Complex.polarToComplex(A, θ);
      return this.figure.step({
        z: z1,
        fill: "fill-green",
        t: 0
      }, (function(_this) {
        return function() {
          var ok1;
          ok1 = Complex.isEqual(z1, z2);
          _this.ok(ok1);
          return _this.figure.step({
            z: z2,
            fill: "fill-red"
          }, function() {
            var ok2;
            _this.figure.step({
              z: z3,
              fill: "fill-blue"
            });
            ok2 = Complex.isEqual(z1, z3);
            _this.ok(ok2);
            _this.correct = ok1 && ok2;
            return _this.saveToServer();
          });
        };
      })(this));
    };

    return _Class;

  })(ExerciseBase);

  Exercise['exercise-complex-plane-2'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.postProcess = function(evals) {
      var A, f, step, z1, z2, z3;
      if (!evals.length) {
        return;
      }
      f = evals[0];
      if (f(0, 0) == null) {
        return;
      }
      A = function(z) {
        return f(z.x, z.y);
      };
      z1 = complex(0.6, 0.8);
      z2 = complex(-1, 1.5);
      z3 = complex(-1.8, -0.6);
      step = (function(_this) {
        return function(spec, next) {
          var notOk, ok, z;
          z = spec.z;
          _this.text("Your A = " + round(A(z), 2));
          ok = Complex.isEqual(A(z), abs(z));
          _this.ok(ok);
          if (!ok) {
            notOk = true;
          }
          return _this.figure.step({
            z: z,
            fill: "fill-green",
            t: spec.t
          }, function() {
            return typeof next === "function" ? next() : void 0;
          });
        };
      })(this);
      this.correct = !(typeof notOk !== "undefined" && notOk !== null);
      return step({
        z: z1,
        t: 0
      }, (function(_this) {
        return function() {
          return step({
            z: z2
          }, function() {
            return step({
              z: z3
            }, function() {
              return _this.saveToServer();
            });
          });
        };
      })(this));
    };

    return _Class;

  })(ExerciseBase);

  Exercise['exercise-complex-addition-1'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.processArgs = "{z, z1, z2}";

    _Class.prototype.process = function(data) {
      var c, ok, z, z1, z2;
      z = data.z, z1 = data.z1, z2 = data.z2;
      if (z1 == null) {
        return;
      }
      c = (function(_this) {
        return function(z) {
          var _ref2, _ref3;
          return complex((_ref2 = z.x) != null ? _ref2 : z, (_ref3 = z.y) != null ? _ref3 : 0);
        };
      })(this);
      z1 = c(z1);
      z2 = c(z2);
      this.figure.vector1.set(z1);
      this.figure.setOrigin2();
      this.figure.vector2.set(z2);
      this.figure.setMagnitude();
      ok = z1.x === z.x && z1.y === 0 && z2.x === 0 && z2.y === z.y;
      this.ok(ok);
      this.correct = ok;
      return this.saveToServer();
    };

    return _Class;

  })(ExerciseBase);

  Exercise['exercise-complex-addition-2'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.processArgs = "{z, z1, z2}";

    _Class.prototype.process = function(data) {
      var c, ok, z, z1, z2, zb;
      z = data.z, z1 = data.z1, z2 = data.z2;
      if (z1 == null) {
        return;
      }
      c = (function(_this) {
        return function(z) {
          var _ref2, _ref3;
          return complex((_ref2 = z.x) != null ? _ref2 : z, (_ref3 = z.y) != null ? _ref3 : 0);
        };
      })(this);
      z2 = c(z2);
      this.figure.vector1.set(z1);
      this.figure.setOrigin2();
      this.figure.vector2.set(z2);
      this.figure.setMagnitude();
      zb = Complex.add(z1, z2);
      ok = Complex.isEqual(z, zb);
      this.ok(ok);
      this.correct = ok;
      return this.saveToServer();
    };

    return _Class;

  })(ExerciseBase);

  Exercise['exercise-complex-addition-3'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.postamble = function() {
      return "\n  null\n  A\n";
    };

    _Class.prototype.postProcess = function(evals) {
      var A, f, step, z, z1, z2;
      if (!evals.length) {
        return;
      }
      f = evals[0];
      z = complex(0, 0);
      if (f(z, z) == null) {
        return;
      }
      A = function(z1, z2) {
        return f(z1, z2);
      };
      z1 = complex(0.5, 0.2);
      z2 = complex(0.5, 0.5);
      console.log("Result", A(z1, z2));
      step = (function(_this) {
        return function(spec, next) {
          var m, notOk, ok, t;
          z1 = spec.z1, z2 = spec.z2, t = spec.t;
          z = Complex.add(z1, z2);
          m = A(z1, z2);
          _this.text("Your A = " + round(m, 2));
          ok = Complex.isEqual(m, abs(z));
          _this.ok(ok);
          if (!ok) {
            notOk = true;
          }
          _this.figure.vector1.set(z1);
          _this.figure.setOrigin2();
          _this.figure.vector2.set(z2);
          return _this.figure.setMagnitude();
        };
      })(this);
      return step({
        z1: z1,
        z2: z2,
        t: 0
      }, (function(_this) {
        return function() {
          _this.correct = !(typeof notOk !== "undefined" && notOk !== null);
          return _this.saveToServer();
        };
      })(this));
    };

    return _Class;

  })(ExerciseBase);

  ExerciseComplexUnit = (function(_super) {
    __extends(ExerciseComplexUnit, _super);

    function ExerciseComplexUnit() {
      return ExerciseComplexUnit.__super__.constructor.apply(this, arguments);
    }

    ExerciseComplexUnit.prototype.postamble = function() {
      return "";
    };

    ExerciseComplexUnit.prototype.forwardVals = function(A) {
      var i, negi, z, _i, _len, _ref2, _results;
      if (A == null) {
        A = 1;
      }
      i = j;
      negi = Complex.diff(0, i);
      _ref2 = [1, i, -1, negi, 1];
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        z = _ref2[_i];
        _results.push(Complex.mul(A, z));
      }
      return _results;
    };

    ExerciseComplexUnit.prototype.reverseVals = function() {
      var i, negi;
      i = j;
      negi = Complex.diff(0, i);
      return [1, negi, -1, i, 1];
    };

    ExerciseComplexUnit.prototype.complexVector = function(vals) {
      var v, vector, z, _i, _len;
      vector = [];
      for (_i = 0, _len = vals.length; _i < _len; _i++) {
        v = vals[_i];
        if (!v) {
          continue;
        }
        z = Complex.complex(v);
        vector.push(complex(round(z.x, 5), round(z.y, 5)));
      }
      return vector;
    };

    ExerciseComplexUnit.prototype.run = function(userValues, correctValues) {
      var correctZ, idx, notOk, ok, z1, z2, zValues, _i, _len, _ref2;
      zValues = this.complexVector(userValues);
      correctZ = this.complexVector(correctValues);
      if (zValues.length === correctValues.length) {
        for (idx = _i = 0, _len = zValues.length; _i < _len; idx = ++_i) {
          z1 = zValues[idx];
          z2 = (_ref2 = correctZ[idx]) != null ? _ref2 : null;
          ok = Complex.isEqual(z1, z2);
          if (!ok) {
            notOk = true;
          }
        }
        this.correct = !(notOk != null);
      } else {
        this.correct = false;
      }
      console.log("zValues", zValues);
      return this.figure.animateSet(zValues, (function(_this) {
        return function() {
          _this.ok(_this.correct);
          return _this.saveToServer();
        };
      })(this));
    };

    return ExerciseComplexUnit;

  })(ExerciseBase);

  Exercise['exercise-complex-unit-1'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.postProcess = function(evals) {
      if (!(evals.length > 3)) {
        return;
      }
      return this.run(evals, this.forwardVals());
    };

    return _Class;

  })(ExerciseComplexUnit);

  Exercise['exercise-complex-unit-2'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.postProcess = function(evals) {
      var angle, n, zValues;
      if (!evals.length) {
        return;
      }
      angle = evals[0];
      if (angle(0) == null) {
        return;
      }
      zValues = (function() {
        var _i, _results;
        _results = [];
        for (n = _i = 0; _i <= 4; n = ++_i) {
          _results.push(Complex.polarToComplex(1, angle(n)));
        }
        return _results;
      })();
      return this.run(zValues, this.forwardVals());
    };

    return _Class;

  })(ExerciseComplexUnit);

  Exercise['exercise-complex-unit-3'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.postProcess = function(evals) {
      if (!(evals.length > 1)) {
        return;
      }
      return this.run(evals, this.reverseVals());
    };

    return _Class;

  })(ExerciseComplexUnit);

  Exercise['exercise-complex-unit-4'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.postProcess = function(evals) {
      var angle, zValues;
      console.log("**** evals", evals);
      angle = evals[0];
      if (angle === "") {
        return;
      }
      zValues = [1, Complex.polarToComplex(1, angle)];
      return this.run(zValues, [1, complex(0, -1)]);
    };

    return _Class;

  })(ExerciseComplexUnit);

  Exercise['exercise-complex-unit-5'] = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.postProcess = function(evals) {
      var A;
      if (!(evals.length > 3)) {
        return;
      }
      A = evals[0];
      return this.run(evals, this.forwardVals(A));
    };

    return _Class;

  })(ExerciseComplexUnit);

  ExerciseRotation = (function() {
    ExerciseRotation.prototype.url = "exercises/rotation.coffee";

    function ExerciseRotation() {
      $(document).on("preCompileCoffee", (function(_this) {
        return function(evt, data) {
          var precompile, _ref2;
          if (((_ref2 = data.resource) != null ? _ref2.url : void 0) !== _this.url) {
            return;
          }
          precompile = {};
          precompile[_this.url] = {
            preamble: "i = j\n",
            postamble: "\n"
          };
          return $blab.precompile(precompile);
        };
      })(this));
      $(document).on("compiledCoffeeScript", (function(_this) {
        return function(evt, data) {
          if (data.url !== _this.url) {
            return;
          }
          _this.resource = $blab.resources.find(_this.url);
          _this.process();
          return _this.report();
        };
      })(this));
    }

    ExerciseRotation.prototype.process = function() {
      var result, x, _i, _len, _ref2, _results;
      this.numbers = [];
      _ref2 = this.resource.resultArray;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        result = _ref2[_i];
        x = this.complex(result);
        if (x) {
          _results.push(this.numbers.push(x));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ExerciseRotation.prototype.report = function() {
      var container, z, _i, _len, _ref2, _results;
      container = $("#exercise-rotation-result");
      container.css({
        marginTop: "20px",
        fontFamily: "courier"
      });
      container.empty();
      container.append("RESULTS<br>");
      _ref2 = this.numbers;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        z = _ref2[_i];
        _results.push(container.append("z = " + z.x + " + " + z.y + "i<br>"));
      }
      return _results;
    };

    ExerciseRotation.prototype.complex = function(x) {
      var type;
      type = typeof x;
      if (type === "object" && x.constructor.name === "T") {
        return x;
      }
      if (type === "number") {
        return complex(x, 0);
      }
      return null;
    };

    return ExerciseRotation;

  })();

  Vector = (function() {
    function Vector(spec) {
      this.spec = spec;
      this.canvas = this.spec.canvas;
      this.x0 = 0;
      this.y0 = 0;
      this.x = 0;
      this.y = 0;
      this.line = new Line({
        canvas: this.canvas,
        "class": "line"
      });
      this.set(this.x, this.y);
    }

    Vector.prototype.setOrigin = function(x0, y0) {
      this.x0 = x0;
      this.y0 = y0;
      return this.set(this.x, this.y);
    };

    Vector.prototype.set = function(x, y) {
      this.x = x;
      this.y = y;
      return this.line.set({
        x1: this.x0,
        y1: this.y0,
        x2: this.x0 + this.x,
        y2: this.y0 + this.y
      });
    };

    return Vector;

  })();

  VectorWithCircle = (function() {
    function VectorWithCircle(spec) {
      var _ref2;
      this.spec = spec;
      this.animate = __bind(this.animate, this);
      _ref2 = this.spec, this.canvas = _ref2.canvas, this["class"] = _ref2["class"], this.radius = _ref2.radius, this.xyLines = _ref2.xyLines, this.xyLabels = _ref2.xyLabels, this.xyComponents = _ref2.xyComponents, this.zLabel = _ref2.zLabel, this.arc = _ref2.arc, this.compute = _ref2.compute, this.click = _ref2.click;
      if (this["class"] == null) {
        this["class"] = "circle fill-green";
      }
      if (this.radius == null) {
        this.radius = 10;
      }
      if (this.xyLabels == null) {
        this.xyLabels = this.xyLines;
      }
      if (this.arc == null) {
        this.arc = true;
      }
      this.vector = new Vector({
        canvas: this.canvas
      });
      this.circle = new Circle({
        canvas: this.canvas,
        "class": this["class"],
        draggable: this.compute != null,
        click: this.click,
        callback: (function(_this) {
          return function(p) {
            var origin, z, zp, _ref3;
            zp = complex(p.x, p.y);
            origin = (_ref3 = _this.origin) != null ? _ref3 : complex(0, 0);
            z = Complex.diff(zp, origin);
            return typeof _this.compute === "function" ? _this.compute(z) : void 0;
          };
        })(this)
      });
      if (this.xyLines) {
        this.showXYLines();
      }
      if (this.xyLabels) {
        this.showXYLabels();
      }
      if (this.xyComponents) {
        this.showXYComponents();
      }
      if (this.zLabel) {
        this.showZLabel();
      }
      if (this.arc) {
        this.showArc();
      }
    }

    VectorWithCircle.prototype.setCircleClass = function(c) {
      return this.circle.setClass("circle " + c);
    };

    VectorWithCircle.prototype.showXYLines = function(show) {
      var setClass;
      if (show == null) {
        show = true;
      }
      setClass = function(line) {
        var c, l;
        l = line.line;
        c = show ? "line-dashed" : "line-invisible";
        return l.attr("class", c);
      };
      if (this.xLine == null) {
        this.xLine = new Line({
          canvas: this.canvas
        });
      }
      if (this.yLine == null) {
        this.yLine = new Line({
          canvas: this.canvas
        });
      }
      setClass(this.xLine);
      return setClass(this.yLine);
    };

    VectorWithCircle.prototype.showXYLabels = function() {
      this.xText = new Text({
        canvas: this.canvas
      });
      this.yText = new Text({
        canvas: this.canvas
      });
      this.xText.text.attr("text-anchor", "middle");
      return this.yText.text.attr("dy", "0.4em");
    };

    VectorWithCircle.prototype.showXYComponents = function() {
      this.xComponent = new Line({
        canvas: this.canvas,
        "class": "component"
      });
      return this.yComponent = new Line({
        canvas: this.canvas,
        "class": "component"
      });
    };

    VectorWithCircle.prototype.showZLabel = function() {
      return this.zText = new Text({
        canvas: this.canvas
      });
    };

    VectorWithCircle.prototype.showArc = function() {
      return this.angleArc = new Arc({
        canvas: this.canvas,
        data: {
          x: 0,
          y: 0,
          innerRadius: 20,
          outerRadius: 22,
          startAngle: pi / 2,
          endAngle: pi / 2
        }
      });
    };

    VectorWithCircle.prototype.setOrigin = function(origin) {
      this.origin = origin;
      this.vector.setOrigin(this.origin.x, this.origin.y);
      return this.set(this.z);
    };

    VectorWithCircle.prototype.set = function(z, angleRotate) {
      var ca, imag, isUnit, real, sa, show, x, x0, xMargin, xl, xo, y, y0, yMargin, yl, yo, zOriginal, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      this.z = z;
      if (angleRotate == null) {
        angleRotate = 0;
      }
      if (this.z == null) {
        this.z = complex(0, 0);
      }
      x = this.z.x;
      y = this.z.y;
      _ref2 = Complex.toPolar(this.z), this.magnitude = _ref2.magnitude, this.angle = _ref2.angle;
      zOriginal = Complex.rotate(this.z, -angleRotate);
      x0 = (_ref3 = (_ref4 = this.origin) != null ? _ref4.x : void 0) != null ? _ref3 : 0;
      y0 = (_ref5 = (_ref6 = this.origin) != null ? _ref6.y : void 0) != null ? _ref5 : 0;
      this.vector.set(x, y);
      this.circle.set({
        x: x0 + x,
        y: y0 + y,
        r: this.radius
      });
      xMargin = "0.3em";
      yMargin = "0.6em";
      xo = zOriginal.x;
      yo = zOriginal.y;
      xl = x0 + x;
      yl = y0 + y;
      ca = Math.cos(angleRotate);
      sa = Math.sin(angleRotate);
      if (angleRotate) {
        if ((_ref7 = this.xLine) != null) {
          _ref7.set({
            x1: x0 + xo * ca,
            y1: xo * sa,
            x2: xl,
            y2: yl
          });
        }
      } else {
        if ((_ref8 = this.xLine) != null) {
          _ref8.set({
            x1: xl,
            y1: 0,
            x2: xl,
            y2: yl
          });
        }
      }
      if ((_ref9 = this.xComponent) != null) {
        _ref9.set({
          x1: 0,
          y1: 0,
          x2: xo * ca,
          y2: xo * sa
        });
      }
      if (angleRotate) {
        if ((_ref10 = this.yLine) != null) {
          _ref10.set({
            x1: -yo * sa,
            y1: y0 + yo * ca,
            x2: xl,
            y2: yl
          });
        }
      } else {
        if ((_ref11 = this.yLine) != null) {
          _ref11.set({
            x1: 0,
            y1: yl,
            x2: xl,
            y2: yl
          });
        }
      }
      if ((_ref12 = this.yComponent) != null) {
        _ref12.set({
          x1: 0,
          y1: 0,
          x2: -yo * sa,
          y2: yo * ca
        });
      }
      if ((_ref13 = this.xText) != null) {
        _ref13.set({
          x: xl,
          y: 0,
          text: angleRotate ? "" : "x=" + round(xl, 1)
        });
      }
      if ((_ref14 = this.xText) != null) {
        _ref14.text.attr("fill", (xl >= 0 ? "black" : "red")).attr("dy", (yl >= 0 ? "1.1em" : "-" + xMargin));
      }
      if ((_ref15 = this.yText) != null) {
        _ref15.set({
          x: 0,
          y: yl,
          text: angleRotate ? "" : "y=" + round(yl, 1)
        });
      }
      if ((_ref16 = this.yText) != null) {
        _ref16.text.attr("fill", (yl >= 0 ? "black" : "red")).attr("text-anchor", (xl >= 0 ? "end" : "start")).attr("dx", (xl >= 0 ? "-" + yMargin : yMargin));
      }
      isUnit = function(x) {
        return abs(abs(x) - 1) < 0.000001;
      };
      real = y === 0 && isUnit(x);
      imag = x === 0 && isUnit(y);
      if ((_ref17 = this.zText) != null) {
        _ref17.set({
          x: (real ? xl : 0),
          y: (imag ? yl : 0),
          text: (real || imag ? "z=" + (real && x < 0 || imag && y < 0 ? "-" : "") + (real ? "1" : "i") : "")
        });
      }
      if ((_ref18 = this.zText) != null) {
        _ref18.text.attr("fill", (real && x >= 0 || imag && y >= 0 ? "black" : "red")).attr("text-anchor", "middle").attr("dy", (real || y < 0 ? "1.5em" : "-0.8em"));
      }
      show = this.magnitude > 0.4;
      if ((_ref19 = this.angleArc) != null) {
        _ref19.set({
          innerRadius: show ? 20 : 0,
          outerRadius: show ? 22 : 0,
          endAngle: pi / 2 - this.angle
        });
      }
      return (_ref20 = this.angleArc) != null ? _ref20.path.attr("fill", (this.angle >= 0 ? "black" : "red")) : void 0;
    };

    VectorWithCircle.prototype.animate = function(zStart, zEnd, callback) {
      var a1, a2, aStep, angle, angles, d, doStep, idx, m1, m2, magnitudes, nSteps, step, stepDelay, wrap, zValues;
      stepDelay = 8;
      m1 = abs(zStart);
      m2 = abs(zEnd);
      a1 = zStart.arg();
      a2 = zEnd.arg();
      wrap = function(a) {
        if (a < 0) {
          return a + 2 * pi;
        } else {
          return a;
        }
      };
      d = abs(a1 - a2);
      if (d > pi) {
        a1 = wrap(a1);
        a2 = wrap(a2);
      }
      if (abs(a1 - a2 - pi) < 0.00001) {
        a1 -= 2 * pi;
      }
      d = abs(a1 - a2);
      nSteps = d > pi / 8 ? Math.round(30 * d) : 10;
      magnitudes = linspace(m1, m2, nSteps);
      angles = linspace(a1, a2, nSteps);
      zValues = (function() {
        var _i, _len, _results;
        _results = [];
        for (idx = _i = 0, _len = angles.length; _i < _len; idx = ++_i) {
          angle = angles[idx];
          _results.push(Complex.polarToComplex(magnitudes[idx], angle));
        }
        return _results;
      })();
      [].splice.apply(zValues, [-1, 9e9].concat(zEnd)), zEnd;
      step = 1;
      aStep = angles[1] - angles[0];
      doStep = (function(_this) {
        return function() {
          var z;
          z = zValues[step];
          _this.set(z, (step + 1 === zValues.length ? 0 : step * aStep));
          step++;
          if (step < zValues.length) {
            return setTimeout((function() {
              return doStep();
            }), stepDelay);
          } else {
            return typeof callback === "function" ? callback() : void 0;
          }
        };
      })(this);
      return doStep();
    };

    return VectorWithCircle;

  })();

  VectorWithTriangle = (function() {
    function VectorWithTriangle(spec) {
      var _ref2;
      this.spec = spec;
      _ref2 = this.spec, this.canvas = _ref2.canvas, this["class"] = _ref2["class"], this.compute = _ref2.compute;
      if (this["class"] == null) {
        this["class"] = "triangle";
      }
      this.radius = this.compute != null ? 10 : 3;
      this.circle = new Circle({
        canvas: this.canvas,
        "class": this.compute != null ? "circle fill-green" : "circle",
        draggable: this.compute != null,
        callback: (function(_this) {
          return function(p) {
            var z;
            z = complex(p.x, p.y);
            return typeof _this.compute === "function" ? _this.compute(z) : void 0;
          };
        })(this)
      });
      this.smallCircle = new Circle({
        canvas: this.canvas,
        "class": "circle fill-black",
        draggable: false
      });
      this.triangle = new Polygon({
        canvas: this.canvas,
        "class": this["class"]
      });
    }

    VectorWithTriangle.prototype.set = function(x, y, xb, yb) {
      this.circle.set({
        x: x,
        y: y,
        r: this.radius
      });
      this.smallCircle.set({
        x: xb,
        y: yb,
        r: 3
      });
      return this.triangle.set([
        {
          x: 0,
          y: 0
        }, {
          x: xb,
          y: yb
        }, {
          x: x,
          y: y
        }
      ]);
    };

    return VectorWithTriangle;

  })();

  VectorSliderPair = (function() {
    function VectorSliderPair(spec) {
      var _ref2, _ref3, _ref4, _ref5, _ref6;
      this.spec = spec;
      _ref2 = this.spec, this.figure = _ref2.figure, this.canvas = _ref2.canvas, this.xyLines = _ref2.xyLines, this.xyLabels = _ref2.xyLabels, this.xyComponents = _ref2.xyComponents, this.arc = _ref2.arc, this.sliderClass = _ref2.sliderClass, this.angleLabel = _ref2.angleLabel, this.getZ = _ref2.getZ;
      this.vector = new VectorWithCircle({
        canvas: this.canvas,
        xyLines: (_ref3 = this.xyLines) != null ? _ref3 : true,
        xyLabels: (_ref4 = this.xyLabels) != null ? _ref4 : false,
        xyComponents: (_ref5 = this.xyComponents) != null ? _ref5 : false,
        arc: (_ref6 = this.arc) != null ? _ref6 : false,
        compute: (function(_this) {
          return function(z) {
            return _this.set(z);
          };
        })(this)
      });
      this.slider = new VerticalAngleSlider({
        container: this.figure.find(this.sliderClass),
        label: this.angleLabel,
        change: (function(_this) {
          return function(angle) {
            var setSlider, z;
            z = Complex.polarToComplex(_this.vector.magnitude, angle);
            setSlider = false;
            return _this.set(z, setSlider);
          };
        })(this)
      });
    }

    VectorSliderPair.prototype.set = function(z, setSlider) {
      var _base;
      if (setSlider == null) {
        setSlider = true;
      }
      z = this.getZ(z);
      this.vector.set(z);
      if (typeof (_base = this.spec).set === "function") {
        _base.set(z);
      }
      if (setSlider) {
        return this.slider.set(this.vector.angle);
      }
    };

    VectorSliderPair.prototype.z = function() {
      var _ref2;
      return (_ref2 = this.vector.z) != null ? _ref2 : complex(0, 0);
    };

    VectorSliderPair.prototype.origin = function() {
      var _ref2;
      return (_ref2 = this.vector.origin) != null ? _ref2 : complex(0, 0);
    };

    VectorSliderPair.prototype.setOrigin = function(z) {
      return this.vector.setOrigin(z);
    };

    VectorSliderPair.prototype.animate = function(zStart, zEnd, callback) {
      return this.vector.animate(zStart, zEnd, (function(_this) {
        return function() {
          var _base;
          if (typeof (_base = _this.spec).set === "function") {
            _base.set(z);
          }
          setTimeout((function() {
            return _this.slider.set(_this.vector.angle);
          }), 10);
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    return VectorSliderPair;

  })();

  VerticalAngleSlider = (function() {
    VerticalAngleSlider.prototype.nAngle = 48;

    function VerticalAngleSlider(spec) {
      var _ref2;
      this.spec = spec;
      _ref2 = this.spec, this.container = _ref2.container, this.label = _ref2.label, this.change = _ref2.change;
      this.container.append(this.template());
      this.sliderContainer = this.container.find(".slider-angle");
      this.slider = new Slider({
        container: this.sliderContainer,
        orientation: "vertical",
        init: 0,
        min: -this.nAngle,
        max: this.nAngle,
        step: 1,
        change: (function(_this) {
          return function(v) {
            _this.angle = _this.nToAngle(v);
            _this.setText();
            return _this.change(_this.angle);
          };
        })(this)
      });
      this.height = this.sliderContainer.height();
      this.prompt = this.container.find(".slider-angle-prompt");
      katex.render(this.label, this.prompt[0]);
      this.text = this.container.find(".slider-angle-text");
    }

    VerticalAngleSlider.prototype.template = function() {
      return "<div class='slider-angle'></div>\n<div class='slider-angle-prompt'></div>\n<div class='slider-angle-text angle-text'></div>";
    };

    VerticalAngleSlider.prototype.set = function(angle) {
      var v;
      this.angle = angle;
      v = round(this.angleToN(this.angle), 2);
      this.slider.set(v);
      return this.setText();
    };

    VerticalAngleSlider.prototype.setText = function() {
      var math, mathjax, special, _ref2;
      _ref2 = angleText(this.angleToN(this.angle)), math = _ref2.math, mathjax = _ref2.mathjax, special = _ref2.special;
      this.text.toggleClass('angle-text-special', special);
      this.text.toggleClass('angle-text-negative', this.angle < 0);
      katex.render(math, this.text[0]);
      return this.setTextPos();
    };

    VerticalAngleSlider.prototype.setTextPos = function() {
      var y;
      y = this.height * 0.5 * (1 - this.angle / pi) - 15;
      return this.text.css({
        top: "" + y + "px"
      });
    };

    VerticalAngleSlider.prototype.angleToN = function(angle) {
      var n;
      n = this.nAngle * angle / pi;
      if (abs(n) < 0.0000001) {
        n = 0;
      }
      return n;
    };

    VerticalAngleSlider.prototype.nToAngle = function(n) {
      return n * pi / this.nAngle;
    };

    return VerticalAngleSlider;

  })();

  HorizontalSlider = (function() {
    function HorizontalSlider(spec) {
      var _ref2;
      this.spec = spec;
      _ref2 = this.spec, this.container = _ref2.container, this.label = _ref2.label, this.init = _ref2.init, this.min = _ref2.min, this.max = _ref2.max, this.step = _ref2.step, this.change = _ref2.change, this.done = _ref2.done;
      this.container.append(this.template());
      this.sliderContainer = this.container.find(".slider-horiz");
      this.slider = new Slider({
        container: this.sliderContainer,
        orientation: "horizontal",
        init: this.init,
        min: this.min,
        max: this.max,
        step: this.step,
        change: (function(_this) {
          return function(v) {
            _this.value = v;
            _this.setText();
            return _this.change(_this.value);
          };
        })(this),
        done: (function(_this) {
          return function() {
            return _this.done();
          };
        })(this)
      });
      this.height = this.sliderContainer.height();
      this.prompt = this.container.find(".slider-horiz-prompt");
      katex.render(this.label, this.prompt[0]);
      this.text = this.container.find(".slider-horiz-text");
    }

    HorizontalSlider.prototype.template = function() {
      return "<div class='slider-horiz-prompt'></div>\n<div class='slider-horiz'></div>\n<div class='slider-horiz-text'></div>";
    };

    HorizontalSlider.prototype.set = function(value) {
      var v;
      this.value = value;
      v = this.value;
      this.slider.set(v);
      return this.setText();
    };

    HorizontalSlider.prototype.val = function() {
      return this.slider.val();
    };

    HorizontalSlider.prototype.setText = function() {
      return this.text.html(this.value);
    };

    return HorizontalSlider;

  })();

  Slider = (function() {
    function Slider(spec) {
      var change, _ref2;
      this.spec = spec;
      _ref2 = this.spec, this.container = _ref2.container, this.min = _ref2.min, this.max = _ref2.max, this.step = _ref2.step, this.init = _ref2.init, this.orientation = _ref2.orientation, this.fast = _ref2.fast, change = _ref2.change, this.done = _ref2.done;
      if (this.orientation == null) {
        this.orientation = "horizontal";
      }
      if (this.fast == null) {
        this.fast = true;
      }
      this.changeFcn = change ? (function(v) {
        return change(v);
      }) : (function() {});
      this.slider = this.container.slider({
        orientation: this.orientation,
        range: "min",
        min: this.min,
        max: this.max,
        step: this.step,
        value: this.init,
        mouseup: function(e) {},
        slide: (function(_this) {
          return function(e, ui) {
            if (_this.fast) {
              return _this.changeFcn(ui.value);
            }
          };
        })(this),
        change: (function(_this) {
          return function(e, ui) {
            if (e.originalEvent) {
              if (typeof _this.done === "function") {
                _this.done();
              }
            }
            if (!_this.fast) {
              return _this.changeFcn(ui.value);
            }
          };
        })(this)
      });
    }

    Slider.prototype.val = function() {
      return this.slider.slider("option", "value");
    };

    Slider.prototype.set = function(v) {
      return this.slider.slider('option', 'value', v);
    };

    return Slider;

  })();

  Z1 = (function() {
    function Z1(spec) {
      var _ref2;
      this.spec = spec;
      _ref2 = this.spec, this.canvas = _ref2.canvas, this.compute = _ref2.compute;
      this.vector = new Vector({
        canvas: this.canvas
      });
      this.circle = new Circle({
        canvas: this.canvas,
        "class": "circle fill-green",
        draggable: this.compute != null,
        callback: (function(_this) {
          return function(p) {
            return _this.compute(p);
          };
        })(this)
      });
    }

    Z1.prototype.set = function(x, y) {
      this.vector.set(x, y);
      return this.circle.set({
        x: x,
        y: y,
        r: 10
      });
    };

    return Z1;

  })();

  round = function(x, n) {
    var f;
    f = Math.pow(10, n);
    return Math.round(x * f) / f;
  };

  angleText = function(a) {
    var aa, math, mathjax, minus, mj, piRad, special, specialAngles, theta;
    theta = pi * a / 48;
    specialAngles = {
      0: '0',
      8: '\\frac{\\pi}{6}',
      12: '\\frac{\\pi}{4}',
      16: '\\frac{\\pi}{3}',
      24: '\\frac{\\pi}{2}',
      32: '\\frac{2\\pi}{3}',
      36: '\\frac{3\\pi}{4}',
      40: '\\frac{5\\pi}{6}',
      48: '\\pi',
      56: '\\frac{7\\pi}{6}',
      60: '\\frac{5\\pi}{4}',
      64: '\\frac{4\\pi}{3}',
      72: '\\frac{3\\pi}{2}',
      80: '\\frac{5\\pi}{3}',
      84: '\\frac{7\\pi}{4}',
      88: '\\frac{11\\pi}{6}',
      96: '2\\pi'
    };
    piRad = Math.round(100 * theta / pi) / 100;
    aa = round(Math.abs(a), 8);
    special = specialAngles[aa] != null;
    minus = "-\\!";
    mj = special ? (a < 0 ? minus : "") + specialAngles[aa] : piRad + "\\pi";
    mj = "{" + mj + "}";
    mathjax = "$" + mj + "$";
    math = mj;
    return {
      math: math,
      mathjax: mathjax,
      special: special
    };
  };

  $blab.Figures = Figures;

}).call(this);
