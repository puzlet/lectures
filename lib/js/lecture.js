// Generated by CoffeeScript 1.7.1
(function() {
  var Arc, ButtonSet, Canvas, Circle, CodeButton, ExerciseBase, Exercises, GridLines, KeyHandler, Line, Polygon, Server, Slides, Text, User,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Slides = (function() {
    function Slides() {
      this.navigate = __bind(this.navigate, this);
      if (!$(document.body).hasClass("slides")) {
        return;
      }
      this.sections = $("section");
      this.sections.hide();
      this.sections.css({
        visibility: "visible"
      });
      this.current = 0;
      $(this.sections[this.current]).show();
      this.lecture = {
        doStep: (function(_this) {
          return function() {
            return _this.navigate(1);
          };
        })(this),
        back: (function(_this) {
          return function() {
            return _this.navigate(-1);
          };
        })(this),
        reset: (function(_this) {
          return function() {};
        })(this)
      };
      KeyHandler.init(this.lecture);
      this.number = $(".slide-navigation .slide-number");
      this.next = $(".slide-navigation .next");
      this.prev = $(".slide-navigation .prev");
      this.setNavButtons();
      this.next.click((function(_this) {
        return function() {
          return _this.lecture.doStep();
        };
      })(this));
      this.prev.click((function(_this) {
        return function() {
          return _this.lecture.back();
        };
      })(this));
    }

    Slides.prototype.setNavButtons = function() {
      var enable;
      this.number.html("" + (this.current + 1) + " of " + this.sections.length);
      enable = (function(_this) {
        return function(b, e) {
          if (e == null) {
            e = true;
          }
          b.toggleClass("nav-button-enable", e);
          return b.toggleClass("nav-button-disable", !e);
        };
      })(this);
      enable(this.next, this.current < this.sections.length - 1);
      return enable(this.prev, this.current > 0);
    };

    Slides.prototype.navigate = function(d) {
      $(this.sections[this.current]).hide();
      if (d > 0 && this.current < this.sections.length - 1) {
        this.current++;
      }
      if (d < 0 && this.current > 0) {
        this.current--;
      }
      $(this.sections[this.current]).show();
      return this.setNavButtons();
    };

    return Slides;

  })();

  KeyHandler = (function() {
    function KeyHandler() {}

    KeyHandler.lecture = null;

    KeyHandler.init = function(lecture) {
      var handler;
      KeyHandler.lecture = lecture;
      handler = (function(_this) {
        return function(evt) {
          return KeyHandler.keyDown(evt);
        };
      })(this);
      $("body").unbind("keydown", handler);
      return $("body").bind("keydown", handler);
    };

    KeyHandler.keyDown = function(evt) {
      var lecture;
      lecture = KeyHandler.lecture;
      if (evt.target.tagName !== "BODY") {
        return;
      }
      if (!lecture) {
        return;
      }
      if (evt.keyCode === 37) {
        return lecture != null ? lecture.back() : void 0;
      } else if (evt.keyCode === 39) {
        return lecture != null ? lecture.doStep() : void 0;
      }
    };

    return KeyHandler;

  })();

  Server = (function() {
    function Server() {}

    Server.lectureId = null;

    Server.local = "//puzlet.mvclark.dev";

    Server["public"] = "//puzlet.mvclark.com";

    Server.aceUrl = "/puzlet/ace/ace.js";

    Server.ready = false;

    Server.groupId = null;

    Server.userId = null;

    Server.isLocal = window.location.hostname === "localhost";

    Server.url = Server.isLocal ? Server.local : Server["public"];

    Server.getAll = function(callback) {
      return $.get("" + this.url, function(data) {
        this.data = data;
        console.log("All exercises from server", this.data);
        return typeof callback === "function" ? callback(this.data) : void 0;
      });
    };

    Server.fetch = function(callback) {
      var ids;
      if (!(this.ready && this.groupId && this.userId)) {
        if (typeof callback === "function") {
          callback();
        }
        return;
      }
      ids = {
        groupId: this.groupId,
        userId: this.userId,
        lectureId: this.lectureId
      };
      return $.get("" + this.url + "/exercise/fetch", ids, (function(_this) {
        return function(data) {
          _this.data = data;
          console.log("Exercises from server", ids, _this.data);
          return typeof callback === "function" ? callback(_this.data) : void 0;
        };
      })(this));
    };

    Server.put = function(exerciseId, content, correct) {
      var record;
      console.log("Exercises record", exerciseId, content, correct);
      if (!(this.ready && this.groupId && this.userId)) {
        return;
      }
      record = {
        groupId: this.groupId,
        userId: this.userId,
        lectureId: this.lectureId,
        exerciseId: exerciseId,
        code: content,
        correct: correct ? 1 : 0
      };
      console.log("PUT data", record);
      return $.ajax({
        type: "POST",
        url: "" + this.url + "/exercise/create",
        data: record,
        dataType: 'json',
        success: function(data) {
          console.log("POST", data);
          if (data.ok) {
            return;
          }
          return alert("Code not saved to server");
        }
      });
    };

    Server.checkUser = function(userId, callback) {
      var ids;
      ids = {
        groupId: this.groupId,
        userId: userId,
        lectureId: this.lectureId
      };
      return $.get("" + this.url + "/checkuser", ids, (function(_this) {
        return function(data) {
          console.log("User exists", ids, data);
          return typeof callback === "function" ? callback(data.userExists) : void 0;
        };
      })(this));
    };

    Server.loadExercises = function(lectureId) {
      this.lectureId = lectureId;
      this.ready = true;
      return this.fetch((function(_this) {
        return function(exercisesData) {
          if (exercisesData) {
            $(document).on("aceFilesLoaded", function() {
              return $.event.trigger("exercisesDataLoaded", {
                exercises: exercisesData
              });
            });
          }
          _this.resources = $blab.resources;
          _this.resources.add({
            url: _this.aceUrl
          });
          return _this.resources.loadUnloaded(function() {
            return typeof $Ace !== "undefined" && $Ace !== null ? $Ace.load(_this.resources) : void 0;
          });
        };
      })(this));
    };

    return Server;

  })();

  User = (function() {
    User.prototype.groupCookie = "group-id";

    User.prototype.userCookie = "user-id";

    function User() {
      var _ref;
      this.groupInput = $(".group-id");
      this.userInput = $(".user-id");
      this.groupId = (_ref = $.cookie(this.groupCookie)) != null ? _ref : 'public';
      if (this.groupId) {
        this.groupInput.val(this.groupId);
        this.showUser();
      }
      this.userId = $.cookie(this.userCookie);
      if (this.userId) {
        this.userInput.val(this.userId);
        this.showUser();
      }
      if (this.groupId && this.userId) {
        this.load();
      }
      this.groupInput.change((function(_this) {
        return function(evt) {
          _this.groupId = evt.target.value;
          $.cookie(_this.groupCookie, _this.groupId, {
            expires: 100
          });
          if (_this.userId) {
            return window.location.reload();
          } else {
            _this.showUser();
            return _this.userInput.focus();
          }
        };
      })(this));
      this.userInput.change((function(_this) {
        return function(evt) {
          var userId;
          userId = evt.target.value;
          return Server.checkUser(userId, function(exists) {
            if (exists && window.location.hash !== "#reset-user") {
              alert("Username not authenticated");
              return _this.userInput.val(_this.userId);
            } else {
              _this.userId = userId;
              $.cookie(_this.userCookie, _this.userId, {
                expires: 100
              });
              return window.location.href = window.location.href.split('#')[0];
            }
          });
        };
      })(this));
    }

    User.prototype.showUser = function() {
      return this.userInput.removeClass("hide");
    };

    User.prototype.load = function() {
      Server.groupId = this.groupId;
      Server.userId = this.userId;
      return Server.fetch((function(_this) {
        return function(data) {
          return $.event.trigger("exercisesDataLoaded", {
            exercises: data
          });
        };
      })(this));
    };

    return User;

  })();

  new User;

  $mathCoffee.preProcessor = function(code) {
    var chars;
    chars = {
      "×": "*",
      "⋅": "*",
      "÷": "/",
      "√": "sqrt",
      "²": "**2",
      "³": "**3",
      "⁴": "**4",
      "\u211C": "Re",
      "ℑ": "Im",
      "₁": "1",
      "₂": "2"
    };
    code = code.replace(/√([a-zA-Z0-9]+)/g, 'sqrt($1)');
    code = code.replace(/([a-zA-Z0-9]+)π/g, '$1*π');
    code = code.replace(/\^/g, "**");
    code = code.replace(/f\((.+)\) =/g, '($1) ->');
    return code = code.replace(/[^\x00-\x80]/g, function(c) {
      var _ref;
      return (_ref = chars[c]) != null ? _ref : c;
    });
  };

  Exercises = (function() {
    function Exercises(id, figure) {
      var E, exercise, sel, _i, _len, _ref;
      this.id = id;
      this.figure = figure;
      sel = "#" + this.id;
      this.mainButton = $("" + sel + " .exercises-button");
      this.container = $("" + sel + " .exercises");
      this.exercises = $("" + sel + " .exercise");
      this.next = $("" + sel + " .next");
      this.previous = $("" + sel + " .previous");
      if ($blab.exercises == null) {
        $blab.exercises = {};
      }
      _ref = this.exercises;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        exercise = _ref[_i];
        id = $(exercise).attr("id");
        E = $blab.Exercise[id];
        if (!E) {
          console.log("!!!!!!!! NOT IMPLEMENTED: Exercise " + id);
          E = ExerciseBase;
        }
        if (E) {
          new E(id, this.figure);
        }
      }
      this.exercises.hide();
      this.current = 0;
      $(this.exercises[this.current]).show();
      this.mainButton.click((function(_this) {
        return function() {
          _this.mainButton.hide(500);
          _this.container.hide();
          _this.container.toggleClass("hide");
          return _this.container.slideDown();
        };
      })(this));
      this.next.click((function(_this) {
        return function() {
          return _this.navigate(1);
        };
      })(this));
      this.previous.click((function(_this) {
        return function() {
          return _this.navigate(-1);
        };
      })(this));
      this.setNavButtons();
    }

    Exercises.prototype.navigate = function(dir) {
      $(this.exercises[this.current]).hide();
      this.current += dir;
      $(this.exercises[this.current]).show();
      return this.setNavButtons();
    };

    Exercises.prototype.setNavButtons = function() {
      this.previous.toggleClass("disable", this.current === 0);
      return this.next.toggleClass("disable", this.current === this.exercises.length - 1);
    };

    return Exercises;

  })();

  ExerciseBase = (function() {
    ExerciseBase.prototype.codeButtons = {
      "×": "⋅",
      "÷": "/",
      "x²": "²",
      "xʸ": "^",
      "√": "√",
      "π": "π",
      "θ": "θ",
      "eˣ": "exp()",
      "sin": "sin()",
      "cos": "cos()"
    };

    ExerciseBase.prototype.preamble = "i = j\nπ = pi\nRe = (z) -> z.x\nIm = (z) -> z.y\n";

    ExerciseBase.prototype.processArgs = "{}";

    ExerciseBase.prototype.postamble = function(process) {
      return "\nnull\n" + process + " " + this.processArgs + "\n";
    };

    ExerciseBase.prototype.runCode = false;

    function ExerciseBase(id, figure) {
      var _ref;
      this.id = id;
      this.figure = figure;
      this.container = $("#" + this.id);
      this.url = (_ref = this.container.find('div[data-file]').data()) != null ? _ref["file"] : void 0;
      if (!this.url) {
        return;
      }
      this.initButtons();
      $(document).on("exercisesDataLoaded", (function(_this) {
        return function(evt, data) {
          var exerciseData;
          exerciseData = data.exercises.find(function(el) {
            return el.exerciseId === _this.id;
          });
          if (exerciseData) {
            return _this.setCode(exerciseData.code);
          }
        };
      })(this));
      $blab.exercises[this.id] = (function(_this) {
        return function(data) {
          return _this.process(data);
        };
      })(this);
      $(document).on("preCompileCoffee", (function(_this) {
        return function(evt, data) {
          _this.runCode = true;
          return _this.preCompile(data.resource);
        };
      })(this));
      $(document).on("compiledCoffeeScript", (function(_this) {
        return function(evt, data) {
          var _ref1;
          if (data.url !== _this.url) {
            return;
          }
          console.log("*** Compiled", _this.url);
          _this.resource = $blab.resources.find(_this.url);
          _this.resultArray = (_ref1 = _this.resource) != null ? _ref1.resultArray : void 0;
          return _this.postProcess(_this.resultArray);
        };
      })(this));
      $(document).on("runCode", (function(_this) {
        return function(evt, data) {
          if (data.filename !== _this.url) {
            return;
          }
          console.log("*** RUN", _this.url);
          return _this.runCode = true;
        };
      })(this));
    }

    ExerciseBase.prototype.getEditor = function() {
      var editor, resource;
      resource = $blab.resources.find(this.url);
      return editor = resource.containers.fileNodes[0].editor;
    };

    ExerciseBase.prototype.saveToServer = function() {
      if (!this.runCode) {
        return;
      }
      console.log("***** SAVE", this.resource, this.id, this.resource.content, this.correct);
      Server.put(this.id, this.resource.content, this.correct);
      return this.runCode = false;
    };

    ExerciseBase.prototype.setCode = function(code) {
      return this.getEditor().set(code);
    };

    ExerciseBase.prototype.process = function(data) {};

    ExerciseBase.prototype.postProcess = function(evals) {};

    ExerciseBase.prototype.preCompile = function(coffee) {
      var postamble, precompile, process, _ref;
      this.coffee = coffee;
      if (((_ref = this.coffee) != null ? _ref.url : void 0) !== this.url) {
        return;
      }
      console.log("+++ Precompile", this.url);
      this.editor = this.getEditor();
      this.editor.session().setUseWorker(false);
      this.buttons.css({
        fontFamily: this.editor.editorContainer.css("font-family")
      });
      precompile = {};
      process = "$blab.exercises['" + this.id + "']";
      postamble = this.postamble(process);
      precompile[this.url] = {
        preamble: this.preamble,
        postamble: postamble
      };
      return $blab.precompile(precompile);
    };

    ExerciseBase.prototype.initButtons = function() {
      var char, label, text, _ref;
      this.buttons = this.container.find(".code-buttons");
      _ref = this.codeButtons;
      for (label in _ref) {
        char = _ref[label];
        this.codeButton(label, char);
      }
      text = $("<div>", {
        "class": "run-instruction",
        html: "Press shift-enter to run"
      });
      return this.buttons.append(text);
    };

    ExerciseBase.prototype.codeButton = function(label, char) {
      return new CodeButton({
        container: this.buttons,
        editor: (function(_this) {
          return function() {
            var _ref;
            return (_ref = _this.editor) != null ? _ref.editor : void 0;
          };
        })(this),
        label: label,
        char: char,
        click: (function(_this) {
          return function(char) {};
        })(this)
      });
    };

    ExerciseBase.prototype.text = function(text, x, y) {
      var canvas, data, _ref;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = -1.5;
      }
      canvas = this.figure.canvas;
      data = {
        x: x,
        y: y,
        text: text
      };
      if (this.tId != null) {
        clearTimeout(this.tId);
      }
      if ((_ref = this.ttext) != null) {
        _ref.text.remove();
      }
      this.ttext = new Text({
        canvas: canvas,
        data: data
      });
      this.ttext.text.attr("text-anchor", "middle");
      return this.tId = setTimeout(((function(_this) {
        return function() {
          return _this.ttext.text.remove();
        };
      })(this)), 2000);
    };

    ExerciseBase.prototype.ok = function(correct) {
      var c, canvas, data, txt, _ref;
      canvas = this.figure.canvas;
      txt = correct ? "Correct" : "Incorrect - Try again";
      data = {
        x: 0,
        y: -2,
        text: txt
      };
      c = correct ? "answer-correct" : "answer-incorrect";
      if (this.oId != null) {
        clearTimeout(this.oId);
      }
      if ((_ref = this.oText) != null) {
        _ref.text.remove();
      }
      this.oText = new Text({
        canvas: canvas,
        data: data,
        "class": c
      });
      this.oText.text.attr("text-anchor", "middle");
      return this.oId = setTimeout(((function(_this) {
        return function() {
          return _this.oText.text.remove();
        };
      })(this)), 2000);
    };

    return ExerciseBase;

  })();

  CodeButton = (function() {
    function CodeButton(spec) {
      var _ref;
      this.spec = spec;
      _ref = this.spec, this.container = _ref.container, this.editor = _ref.editor, this.label = _ref.label, this.char = _ref.char, this.click = _ref.click;
      this.button = $("<div>", {
        "class": "code-button",
        html: this.label,
        click: (function(_this) {
          return function() {
            var column, row, _ref1;
            if (typeof _this.editor === "function") {
              _this.editor().insert(_this.char);
            }
            if (typeof _this.editor === "function") {
              _this.editor().focus();
            }
            if (_this.char.match(/\(\)/g)) {
              _ref1 = typeof _this.editor === "function" ? _this.editor().getCursorPosition() : void 0, row = _ref1.row, column = _ref1.column;
              if (typeof _this.editor === "function") {
                _this.editor().moveCursorTo(row, column - 1);
              }
            }
            return typeof _this.click === "function" ? _this.click(_this) : void 0;
          };
        })(this)
      });
      if (this.label.length > 2) {
        this.button.css({
          fontSize: "8pt"
        });
      }
      this.container.append(this.button);
    }

    return CodeButton;

  })();

  ButtonSet = (function() {
    function ButtonSet(sectionId, buttons) {
      var b, callback, _i, _len, _ref;
      this.sectionId = sectionId;
      this.buttons = buttons;
      this.allButtons = $("" + this.sectionId + " .text-button");
      callback = (function(_this) {
        return function(method) {
          return function() {
            _this.allButtons.addClass("disabled");
            return method(function() {
              return _this.allButtons.removeClass("disabled");
            });
          };
        };
      })(this);
      _ref = this.buttons;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        $("" + this.sectionId + " #" + b.id).click(callback(b.method));
      }
    }

    return ButtonSet;

  })();

  Canvas = (function() {
    function Canvas(spec) {
      var _ref;
      this.spec = spec;
      _ref = this.spec, this.container = _ref.container, this.width = _ref.width, this.height = _ref.height, this.margin = _ref.margin, this.xDomain = _ref.xDomain, this.yDomain = _ref.yDomain;
      this.graphics = d3.select(this.container[0]);
      this.graphics.selectAll("svg").remove();
      this.svg = this.graphics.append("svg").attr('width', this.width).attr('height', this.height);
      this.w = this.width - this.margin.left - this.margin.right;
      this.h = this.height - this.margin.top - this.margin.bottom;
      this.canvas = this.svg.append("g").attr("transform", "translate(" + this.margin.left + ", " + this.margin.top + ")").attr("width", this.w).attr("height", this.h);
      this.mx = d3.scale.linear().domain(this.xDomain).range([0, this.w]);
      this.my = d3.scale.linear().domain(this.yDomain).range([this.h, 0]);
    }

    Canvas.prototype.invertX = function(x) {
      return this.limit(this.mx.invert(x), this.xDomain);
    };

    Canvas.prototype.invertY = function(y) {
      return this.limit(this.my.invert(y), this.yDomain);
    };

    Canvas.prototype.limit = function(z, d) {
      if (z > d[1]) {
        return d[1];
      }
      if (z < d[0]) {
        return d[0];
      }
      return z;
    };

    Canvas.prototype.append = function(obj) {
      return this.canvas.append(obj);
    };

    return Canvas;

  })();

  Line = (function() {
    function Line(spec) {
      var _ref, _ref1;
      this.spec = spec;
      _ref = this.spec, this.canvas = _ref.canvas, this.points = _ref.points, this["class"] = _ref["class"];
      this.line = this.canvas.append("line").attr("class", this["class"]);
      _ref1 = this.canvas, this.mx = _ref1.mx, this.my = _ref1.my;
      if (this.points != null) {
        this.set(this.points);
      }
    }

    Line.prototype.set = function(points) {
      var x1, x2, y1, y2, _ref;
      this.points = points;
      _ref = this.points, x1 = _ref.x1, y1 = _ref.y1, x2 = _ref.x2, y2 = _ref.y2;
      return this.line.attr("x1", this.mx(x1)).attr("y1", this.my(y1)).attr("x2", this.mx(x2)).attr("y2", this.my(y2));
    };

    return Line;

  })();

  Arc = (function() {
    function Arc(spec) {
      var _ref, _ref1;
      this.spec = spec;
      _ref = this.spec, this.canvas = _ref.canvas, this.data = _ref.data, this["class"] = _ref["class"];
      this.path = this.canvas.append("path").attr("class", this["class"]);
      _ref1 = this.canvas, this.mx = _ref1.mx, this.my = _ref1.my;
      this.arc = d3.svg.arc();
      if (this.data != null) {
        this.set(this.data);
      }
    }

    Arc.prototype.set = function(data) {
      this.data = data;
      if (this.data.innerRadius != null) {
        this.arc.innerRadius(this.data.innerRadius);
      }
      if (this.data.outerRadius != null) {
        this.arc.outerRadius(this.data.outerRadius);
      }
      if (this.data.startAngle != null) {
        this.arc.startAngle(this.data.startAngle);
      }
      if (this.data.endAngle != null) {
        this.arc.endAngle(this.data.endAngle);
      }
      this.path.attr("d", this.arc);
      if ((this.data.x != null) && (this.data.y != null)) {
        return this.path.attr("transform", "translate(" + (this.mx(this.data.x)) + "," + (this.my(this.data.y)) + ")");
      }
    };

    return Arc;

  })();

  Circle = (function() {
    function Circle(spec) {
      var _ref, _ref1;
      this.spec = spec;
      _ref = this.spec, this.canvas = _ref.canvas, this.data = _ref.data, this.draggable = _ref.draggable, this["class"] = _ref["class"], this.click = _ref.click;
      this.circle = this.canvas.append("circle").attr("class", this["class"]);
      if (this.draggable) {
        this.setDraggable();
      }
      _ref1 = this.canvas, this.mx = _ref1.mx, this.my = _ref1.my;
      if (this.data != null) {
        this.set(this.data);
      }
    }

    Circle.prototype.set = function(data) {
      var r, x, y, _ref;
      this.data = data;
      _ref = this.data, x = _ref.x, y = _ref.y, r = _ref.r;
      this.circle.attr("cx", this.mx(x)).attr("cy", this.my(y)).attr("r", r);
      if (!this.draggable && (this.click != null)) {
        return this.circle.on("click", (function(_this) {
          return function() {
            return _this.click();
          };
        })(this));
      }
    };

    Circle.prototype.setDraggable = function() {
      return this.circle.call(d3.behavior.drag().on("drag", (function(_this) {
        return function() {
          var x, y, _base;
          x = d3.event.x;
          y = d3.event.y;
          _this.data.x = _this.canvas.invertX(x);
          _this.data.y = _this.canvas.invertY(y);
          return typeof (_base = _this.spec).callback === "function" ? _base.callback(_this.data) : void 0;
        };
      })(this)));
    };

    Circle.prototype.setClass = function(_class) {
      this["class"] = _class;
      return this.circle.attr("class", this["class"]);
    };

    return Circle;

  })();

  Polygon = (function() {
    function Polygon(spec) {
      var _ref, _ref1;
      this.spec = spec;
      _ref = this.spec, this.canvas = _ref.canvas, this.points = _ref.points, this["class"] = _ref["class"];
      this.path = this.canvas.append("path").attr("class", this["class"]);
      _ref1 = this.canvas, this.mx = _ref1.mx, this.my = _ref1.my;
      this.line = d3.svg.line().x((function(_this) {
        return function(d) {
          return _this.mx(d.x);
        };
      })(this)).y((function(_this) {
        return function(d) {
          return _this.my(d.y);
        };
      })(this)).interpolate("linear");
      if (this.points != null) {
        this.set(this.points);
      }
    }

    Polygon.prototype.set = function(points) {
      this.points = points;
      return this.path.attr("d", this.line(this.points) + "Z");
    };

    return Polygon;

  })();

  GridLines = (function() {
    function GridLines(spec) {
      this.spec = spec;
      this.canvas = this.spec.canvas;
      this.xDomain = this.canvas.xDomain;
      this.yDomain = this.canvas.yDomain;
      this.xAxis = new Line({
        canvas: this.canvas,
        "class": "grid-line",
        points: {
          x1: this.xDomain[0],
          y1: 0,
          x2: this.xDomain[1],
          y2: 0
        }
      });
      this.yAxis = new Line({
        canvas: this.canvas,
        "class": "grid-line",
        points: {
          x1: 0,
          y1: this.yDomain[0],
          x2: 0,
          y2: this.yDomain[1]
        }
      });
    }

    return GridLines;

  })();

  Text = (function() {
    function Text(spec) {
      var _ref, _ref1;
      this.spec = spec;
      _ref = this.spec, this.canvas = _ref.canvas, this.data = _ref.data, this["class"] = _ref["class"];
      this.text = this.canvas.append("text").attr("class", this["class"]);
      _ref1 = this.canvas, this.mx = _ref1.mx, this.my = _ref1.my;
      if (this.data != null) {
        this.set(this.data);
      }
    }

    Text.prototype.set = function(data) {
      var text, x, y, _ref;
      this.data = data;
      _ref = this.data, x = _ref.x, y = _ref.y, text = _ref.text;
      return this.text.attr("x", this.mx(x)).attr("y", this.my(y)).text(text);
    };

    return Text;

  })();

  $(document).tooltip({
    content: function() {
      return $(this).prop('title');
    }
  });

  if (window.$blab == null) {
    window.$blab = {};
  }

  $blab.Slides = Slides;

  $blab.Exercises = {
    Server: Server,
    Exercises: Exercises,
    ExerciseBase: ExerciseBase,
    ButtonSet: ButtonSet
  };

  $blab.d3 = {
    Canvas: Canvas,
    Line: Line,
    Arc: Arc,
    Circle: Circle,
    Polygon: Polygon,
    GridLines: GridLines,
    Text: Text
  };

}).call(this);
