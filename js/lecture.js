// Generated by CoffeeScript 1.7.1
(function() {
  var Guide, KeyHandler, Pointer, Progress, StartButton, Widgets;

  Widgets = null;

  Widgets = $blab.Widgets;

  $blab.computation = function(computeFile, components) {
    var component, compute, name, ui;
    ui = {};
    compute = $blab.resources.find(computeFile);
    for (name in components) {
      component = components[name];
      ui[name] = typeof component.ui === "function" ? component.ui() : void 0;
      if (typeof component.change === "function") {
        component.change(function() {
          return compute.compile();
        });
      }
    }
    $blab.ui = ui;
    $blab.postProcessing = function() {
      var _results;
      _results = [];
      for (name in components) {
        component = components[name];
        _results.push(typeof component.setFunctions === "function" ? component.setFunctions() : void 0);
      }
      return _results;
    };
    return $(document).on("preCompileCoffee", (function(_this) {
      return function(evt, data) {
        var list, names, precompile, _ref;
        if (((_ref = data.resource) != null ? _ref.url : void 0) !== computeFile) {
          return;
        }
        names = (function() {
          var _results;
          _results = [];
          for (name in components) {
            _results.push(name);
          }
          return _results;
        })();
        list = names.join(", ");
        precompile = {};
        precompile[computeFile] = {
          preamble: "{" + list + "} = $blab.ui\n",
          postamble: "$blab.postProcessing()\n"
        };
        return $blab.precompile(precompile);
      };
    })(this));
  };

  $blab.Lecture = (function() {
    function Lecture() {
      this.startButton = new StartButton(this);
      this.guide = new Guide();
      this.progress = new Progress();
      this.pointer = new Pointer();
      this.steps = [];
      this.stepIdx = -1;
      this.content();
    }

    Lecture.prototype.start = function() {
      this.startButton.hide();
      KeyHandler.init(this);
      this.steps = [];
      this.stepIdx = -1;
      this.init();
      this.content();
      return setTimeout(((function(_this) {
        return function() {
          return _this.kickoff();
        };
      })(this)), 100);
    };

    Lecture.prototype.kickoff = function() {
      this.init();
      return this.doStep();
    };

    Lecture.prototype.init = function() {
      console.log("******** OBJECTS", $("[id|=lecture]").css("display"));
      this.hideElements();
      return this.guide.init();
    };

    Lecture.prototype.content = function() {};

    Lecture.prototype.reset = function() {
      KeyHandler.init(null);
      this.guide.hide();
      this.progress.clear();
      this.pointer.hide();
      this.showElements();
      this.startButton.show();
      return this.stepIdx = -1;
    };

    Lecture.prototype.step = function(obj, spec) {
      var action, audio, domId, origVal, pointer, rObj;
      if (spec == null) {
        spec = {};
      }
      if (typeof obj === "string") {
        obj = $("#" + obj);
      }
      action = spec.action;
      if (action == null) {
        action = function(o) {
          return {
            f: function() {
              return o.show();
            },
            b: function() {
              return o.hide();
            }
          };
        };
      }
      if (action === "fade") {
        action = function(o) {
          return {
            f: function() {
              return o.fadeIn();
            },
            b: function() {
              return o.fadeOut();
            }
          };
        };
      }
      if (spec.replace) {
        rObj = spec.replace;
        action = function(o) {
          return {
            f: function() {
              return rObj.fadeOut(300, function() {
                return o.fadeIn();
              });
            },
            b: function() {
              return o.hide(0, function() {
                return rObj.show();
              });
            }
          };
        };
      }
      if (action === "menu") {
        domId = origObj.attr("id");
        origVal = Widgets.widgets[domId].getVal();
        action = (function(_this) {
          return function(o) {
            console.log("origVal", origVal);
            return {
              f: function() {
                return _this.setMenu(origObj, spec.val);
              },
              b: function() {
                return _this.setMenu(origObj, origVal);
              }
            };
          };
        })(this);
      }
      if (action === "table") {
        action = (function(_this) {
          return function(o) {
            return {
              f: function() {
                return _this.tablePopulate(obj, spec.col, spec.vals, function() {});
              },
              b: function() {}
            };
          };
        })(this);
      }
      audio = spec.audio;
      if (audio && !$("audio" + audio).length) {
        $(document.body).append("<audio id='" + audio + "' src='" + this.audioServer + "/" + audio + ".mp3'></audio>\n");
      }
      pointer = spec.pointer;
      this.steps = this.steps.concat({
        obj: obj,
        action: action,
        audio: audio,
        pointer: pointer
      });
      return obj;
    };

    Lecture.prototype.doStep = function() {
      var action, audio, audioId, obj, pointer, step;
      if (this.stepIdx < this.steps.length) {
        this.stepIdx++;
      }
      this.progress.draw(this.stepIdx + 1, this.steps.length);
      if (this.stepIdx >= 0 && this.stepIdx < this.steps.length) {
        step = this.steps[this.stepIdx];
        obj = step.obj;
        action = step.action;
        action(obj).f();
        audioId = step.audio;
        if (audioId && this.enableAudio) {
          audio = document.getElementById(audioId);
          audio.play();
        }
        pointer = step.pointer;
        if (pointer) {
          this.pointer.setPosition(pointer);
        } else {
          this.pointer.hide();
        }
      }
      if (this.stepIdx >= this.steps.length) {
        this.guide.end();
        this.guide.show();
        this.pointer.hide();
      } else {
        this.guide.hide();
      }
      return console.log("stepIdx", this.stepIdx);
    };

    Lecture.prototype.back = function() {
      var action, obj, step;
      console.log("BACK STEP");
      if (this.stepIdx >= 0 && this.stepIdx < this.steps.length) {
        step = this.steps[this.stepIdx];
        obj = step.obj;
        action = step.action;
        action(obj).b();
      }
      if (this.stepIdx >= 0) {
        this.stepIdx--;
      }
      this.progress.draw(this.stepIdx + 1, this.steps.length);
      this.pointer.hide();
      console.log("stepIdx", this.stepIdx);
      if (this.stepIdx < 0) {
        this.guide.start();
        return this.guide.show();
      } else {
        return this.guide.hide();
      }
    };

    Lecture.prototype.action = function(spec) {
      return (function(_this) {
        return function(o) {
          var component;
          component = o.data("blab-component");
          return component != null ? typeof component.lectureAction === "function" ? component.lectureAction(spec) : void 0 : void 0;
        };
      })(this);
    };

    Lecture.prototype.setMenu = function(obj, val, cb) {
      var domId;
      console.log("**** SET MENU", obj, val);
      domId = obj.attr("id");
      Widgets.widgets[domId].setVal(val);
      Widgets.widgets[domId].menu.val(val).trigger("change");
      Widgets.compute();
      return typeof cb === "function" ? cb() : void 0;
    };

    Lecture.prototype.tablePopulate = function(obj, col, vals, cb) {
      var delay, domId, idx, setTable;
      delay = 1000;
      idx = 0;
      domId = obj.attr("id");
      setTable = (function(_this) {
        return function(cb) {
          var bg, cell, cells, dir, t, v;
          v = vals[idx];
          t = Widgets.widgets[domId];
          console.log("***t/col/vals/idx", t, col, vals, idx);
          cell = t.editableCells[col][idx];
          dir = idx < vals.length - 1 ? 1 : 0;
          cell.div.text(v);
          bg = cell.div.parent().css("background");
          cell.div.parent().css({
            background: "#ccc"
          });
          setTimeout((function() {
            cell.div.parent().css({
              background: bg
            });
            return cell.done();
          }), 200);
          idx++;
          if (idx < vals.length) {
            return setTimeout((function() {
              return setTable(cb);
            }), delay);
          } else {
            console.log("cells", $('.editable-table-cell'));
            cells = $('.editable-table-cell');
            setTimeout((function() {
              $(cells[2]).blur();
              return $("#container").click();
            }), 1000);
            return typeof cb === "function" ? cb() : void 0;
          }
        };
      })(this);
      return setTable(cb);
    };

    Lecture.prototype.table = function(obj, spec) {
      spec.action = "table";
      return this.step(obj, spec);
    };

    Lecture.prototype.menu = function(obj, spec) {
      spec.action = "menu";
      return this.step(obj, spec);
    };

    Lecture.prototype.hideElements = function() {
      return $("[id|=lecture]").hide();
    };

    Lecture.prototype.showElements = function() {
      $("[id|=lecture]").show();
      return $(".hide[id|=lecture]").hide();
    };

    return Lecture;

  })();

  StartButton = (function() {
    function StartButton(lecture) {
      this.lecture = lecture;
      this.button = $("#start-lecture-button");
      if (this.button.length) {
        return;
      }
      this.button = $("<button>", {
        id: "start-lecture-button",
        text: "Start lecture",
        css: {
          marginBottom: "10px"
        }
      });
      $("#container").after(this.button);
      this.button.click((function(_this) {
        return function(evt) {
          return _this.lecture.start();
        };
      })(this));
    }

    StartButton.prototype.show = function() {
      return this.button.show();
    };

    StartButton.prototype.hide = function() {
      return this.button.hide();
    };

    return StartButton;

  })();

  KeyHandler = (function() {
    function KeyHandler() {}

    KeyHandler.lecture = null;

    KeyHandler.init = function(lecture) {
      var handler;
      KeyHandler.lecture = lecture;
      handler = (function(_this) {
        return function(evt) {
          return KeyHandler.keyDown(evt);
        };
      })(this);
      $("body").unbind("keydown", handler);
      return $("body").bind("keydown", handler);
    };

    KeyHandler.keyDown = function(evt) {
      var lecture;
      lecture = KeyHandler.lecture;
      if (evt.target.tagName !== "BODY") {
        return;
      }
      if (!lecture) {
        return;
      }
      if (evt.keyCode === 37) {
        return lecture != null ? lecture.back() : void 0;
      } else if (evt.keyCode === 27) {
        if (lecture != null) {
          lecture.reset();
        }
        return lecture = null;
      } else {
        console.log(evt.keyCode);
        return lecture != null ? lecture.doStep() : void 0;
      }
    };

    return KeyHandler;

  })();

  Guide = (function() {
    function Guide() {
      this.guide = $("#demo-guide");
      this.guide.draggable();
      this.guide.css({
        top: 30,
        left: $("body").width() - 200,
        background: typeof background !== "undefined" && background !== null ? background : "#ff9",
        textAlign: "center",
        width: 150
      });
      this.hide();
    }

    Guide.prototype.init = function() {
      var hide, show;
      this.guide.html("<b>&#8592; &#8594;</b> to navigate<br>\n<b>Esc</b> to exit");
      show = (function(_this) {
        return function() {
          _this.show();
          return setTimeout((function() {
            return hide();
          }), 5000);
        };
      })(this);
      hide = (function(_this) {
        return function() {
          _this.hide();
          return _this.css({
            textAlign: "center"
          });
        };
      })(this);
      return setTimeout((function() {
        return show();
      }), 1000);
    };

    Guide.prototype.start = function() {
      return this.guide.html("<b>Start of lecture</b><br>\n<b>&#8592; &#8594;</b> to navigate<br>\n<b>Esc</b> to exit");
    };

    Guide.prototype.end = function() {
      return this.guide.html("<b>End of lecture</b><br>\n<b>&#8592; &#8594;</b> to navigate<br>\n<b>Esc</b> to exit");
    };

    Guide.prototype.show = function() {
      return this.guide.show();
    };

    Guide.prototype.hide = function() {
      if (this.guide.is(":visible")) {
        return this.guide.hide();
      }
    };

    Guide.prototype.html = function(html) {
      return this.guide.html(html);
    };

    Guide.prototype.css = function(css) {
      return this.guide.css(css);
    };

    return Guide;

  })();

  Progress = (function() {
    function Progress() {
      this.container = $(document.body);
      this.wrapper = $("<div>", {
        "class": "progress-outer"
      });
      this.container.append(this.wrapper);
      this.div = $("<div>", {
        "class": "progress-inner"
      });
      this.wrapper.append(this.div);
    }

    Progress.prototype.draw = function(currentStep, numSteps) {
      var fill, step, _i, _ref, _results;
      this.currentStep = currentStep;
      this.numSteps = numSteps;
      this.clear();
      _results = [];
      for (step = _i = 1, _ref = this.numSteps; 1 <= _ref ? _i <= _ref : _i >= _ref; step = 1 <= _ref ? ++_i : --_i) {
        fill = step === this.currentStep;
        _results.push(this.circle(fill));
      }
      return _results;
    };

    Progress.prototype.clear = function() {
      return this.div.empty();
    };

    Progress.prototype.circle = function(filled) {
      var circle;
      if (filled == null) {
        filled = false;
      }
      circle = $("<div>", {
        "class": "step-circle" + (filled ? " step-circle-filled" : "")
      });
      return this.div.append(circle);
    };

    return Progress;

  })();

  Pointer = (function() {
    function Pointer() {
      this.container = $("#container");
      this.pointer = $("<img>", {
        "class": "lecture-pointer",
        src: "../img/pointer.png"
      });
      this.pointer.hide();
      this.pointer.css({
        left: 500,
        top: 500
      });
      this.container.append(this.pointer);
      $(document.body).click((function(_this) {
        return function(evt) {
          var offset;
          offset = _this.container.offset();
          return console.log("container(x, y)", evt.clientX - offset.left, evt.clientY);
        };
      })(this));
    }

    Pointer.prototype.show = function() {
      return this.pointer.show();
    };

    Pointer.prototype.hide = function() {
      return this.pointer.hide();
    };

    Pointer.prototype.setPosition = function(coords) {
      var adjust;
      this.show();
      adjust = {
        left: 13,
        top: 45
      };
      return this.pointer.animate({
        left: coords[0] - adjust.left,
        top: coords[1] - adjust.top
      });
    };

    return Pointer;

  })();

  $blab.style = function(id, css) {
    var s;
    s = $("style#" + id);
    if (!s.length) {
      s = $("<style>", {
        id: id
      });
      s.appendTo("head");
    }
    return s.html("\n" + css + "\n");
  };

}).call(this);
